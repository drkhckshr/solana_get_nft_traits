{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["import { Metaplex } from \"@metaplex-foundation/js\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport tokenMints from \"../data.json\";\nconst fs = require(\"fs\");\n\n(async () => {\n\n  const connection = new Connection(\"https://api.mainnet-beta.solana.com\");\n  const metaplex = new Metaplex(connection);\n  \n  let holders = [];\n  let nfts = [];\n\n  for(let i = 0;i<tokenMints.length;i++){\n\n    // // START HOLDERS\n    // const largestAccounts = await connection.getTokenLargestAccounts(\n    //   new PublicKey(tokenMints[i])\n    // );\n    \n    // const largestAccountInfo = await connection.getParsedAccountInfo(\n    //   largestAccounts.value[0].address\n    // );\n    \n    // // TOKEN ADDRESS\n    // console.log(tokenMints[i]);\n    \n    // // OWNER ACCOUNT ADDRESS\n    // console.log(largestAccountInfo.value.data.parsed.info.owner);\n    \n    // holders.push({\n    //   owner_account: largestAccountInfo.value.data.parsed.info.owner,\n    //   token_address: tokenMints[i]\n    // });\n\n    // fs.writeFile(\"holders.json\", JSON.stringify(holders), err => {\n    //   if (err) throw err;\n    // });\n    // // END HOLDERS\n\n    //START NFTS\n    const mintAddress = new PublicKey(tokenMints[i])\n    const nft = await metaplex.nfts().findByMint({ mintAddress });\n    const nft_name = nft.json.name;\n    const nft_attributes = nft.json.attributes;\n\n    data_object = {};\n    var key = \"name\";\n    var value = nft_name;\n    data_object[key] = value;\n    \n    for(let i = 0;i<nft_attributes.length;i++){\n      const key = nft_attributes[i].trait_type.toLowerCase( ).replace(/ /g,\"_\");\n      const value = nft_attributes[i].value;\n      data_object[key] = value;\n    }\n\n    console.log(data_object);\n    \n    nfts.push(data_object);\n\n    fs.writeFile(\"nfts.json\", JSON.stringify(nfts), err => {\n      if (err) throw err;\n    });\n    // END NFTS\n\n    await new Promise(f => setTimeout(f, 100));\n    \n  }\n})();"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,gBAAyB;AACzB,kBAAsC;AACtC,kBAAuB;AACvB,MAAM,KAAK,QAAQ;AAEnB,AAAC,aAAY;AAEX,QAAM,aAAa,IAAI,uBAAW;AAClC,QAAM,WAAW,IAAI,mBAAS;AAE9B,MAAI,UAAU;AACd,MAAI,OAAO;AAEX,WAAQ,IAAI,GAAE,IAAE,oBAAW,QAAO,KAAI;AA4BpC,UAAM,cAAc,IAAI,sBAAU,oBAAW;AAC7C,UAAM,MAAM,MAAM,SAAS,OAAO,WAAW,EAAE;AAC/C,UAAM,WAAW,IAAI,KAAK;AAC1B,UAAM,iBAAiB,IAAI,KAAK;AAEhC,kBAAc;AACd,QAAI,MAAM;AACV,QAAI,QAAQ;AACZ,gBAAY,OAAO;AAEnB,aAAQ,KAAI,GAAE,KAAE,eAAe,QAAO,MAAI;AACxC,YAAM,OAAM,eAAe,IAAG,WAAW,cAAe,QAAQ,MAAK;AACrE,YAAM,SAAQ,eAAe,IAAG;AAChC,kBAAY,QAAO;AAAA;AAGrB,YAAQ,IAAI;AAEZ,SAAK,KAAK;AAEV,OAAG,UAAU,aAAa,KAAK,UAAU,OAAO,SAAO;AACrD,UAAI;AAAK,cAAM;AAAA;AAIjB,UAAM,IAAI,QAAQ,OAAK,WAAW,GAAG;AAAA;AAAA;",
  "names": []
}
